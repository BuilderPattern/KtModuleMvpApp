package kt.module.base_module.data.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import kt.module.base_module.data.db.table.ChildEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_ENTITY".
*/
public class ChildEntityDao extends AbstractDao<ChildEntity, Long> {

    public static final String TABLENAME = "CHILD_ENTITY";

    /**
     * Properties of entity ChildEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ObjectId = new Property(0, Long.class, "objectId", false, "OBJECT_ID");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Uname = new Property(3, String.class, "uname", false, "UNAME");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Avatars = new Property(5, String.class, "avatars", false, "AVATARS");
        public final static Property Type_description = new Property(6, String.class, "type_description", false, "TYPE_DESCRIPTION");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Img = new Property(8, String.class, "img", false, "IMG");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property Bgavatar = new Property(10, String.class, "bgavatar", false, "BGAVATAR");
        public final static Property Tcount = new Property(11, int.class, "tcount", false, "TCOUNT");
        public final static Property Count = new Property(12, String.class, "count", false, "COUNT");
        public final static Property Scount = new Property(13, String.class, "scount", false, "SCOUNT");
        public final static Property Type = new Property(14, String.class, "type", false, "TYPE");
        public final static Property Subtitle = new Property(15, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Subtitle_new = new Property(16, String.class, "subtitle_new", false, "SUBTITLE_NEW");
        public final static Property Title_img_new = new Property(17, String.class, "title_img_new", false, "TITLE_IMG_NEW");
        public final static Property Type_new = new Property(18, String.class, "type_new", false, "TYPE_NEW");
        public final static Property Thumb_img = new Property(19, String.class, "thumb_img", false, "THUMB_IMG");
        public final static Property Ppp = new Property(20, int.class, "ppp", false, "PPP");
        public final static Property Splay_count = new Property(21, int.class, "splay_count", false, "SPLAY_COUNT");
        public final static Property Play_count = new Property(22, int.class, "play_count", false, "PLAY_COUNT");
        public final static Property Small_num = new Property(23, int.class, "small_num", false, "SMALL_NUM");
        public final static Property Content = new Property(24, String.class, "content", false, "CONTENT");
        public final static Property Start_time = new Property(25, String.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(26, String.class, "end_time", false, "END_TIME");
        public final static Property Bm_start_time = new Property(27, String.class, "bm_start_time", false, "BM_START_TIME");
        public final static Property Bm_end_time = new Property(28, String.class, "bm_end_time", false, "BM_END_TIME");
        public final static Property Num = new Property(29, int.class, "num", false, "NUM");
        public final static Property Day_num = new Property(30, int.class, "day_num", false, "DAY_NUM");
        public final static Property Created_at = new Property(31, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(32, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Ka_num = new Property(33, int.class, "ka_num", false, "KA_NUM");
        public final static Property Can_created_at = new Property(34, String.class, "can_created_at", false, "CAN_CREATED_AT");
        public final static Property Buy_count = new Property(35, int.class, "buy_count", false, "BUY_COUNT");
        public final static Property Course_num = new Property(36, int.class, "course_num", false, "COURSE_NUM");
        public final static Property Listen_users_count = new Property(37, String.class, "listen_users_count", false, "LISTEN_USERS_COUNT");
        public final static Property Img_new = new Property(38, String.class, "img_new", false, "IMG_NEW");
        public final static Property Tex = new Property(39, String.class, "tex", false, "TEX");
        public final static Property Sequence = new Property(40, int.class, "sequence", false, "SEQUENCE");
        public final static Property Baoming = new Property(41, int.class, "baoming", false, "BAOMING");
        public final static Property Type_course = new Property(42, String.class, "type_course", false, "TYPE_COURSE");
        public final static Property Body_img_new = new Property(43, String.class, "body_img_new", false, "BODY_IMG_NEW");
    }

    private Query<ChildEntity> objectEntity_ChildQuery;

    public ChildEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChildEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_ENTITY\" (" + //
                "\"OBJECT_ID\" INTEGER," + // 0: objectId
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: id
                "\"TITLE\" TEXT," + // 2: title
                "\"UNAME\" TEXT," + // 3: uname
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"AVATARS\" TEXT," + // 5: avatars
                "\"TYPE_DESCRIPTION\" TEXT," + // 6: type_description
                "\"URL\" TEXT," + // 7: url
                "\"IMG\" TEXT," + // 8: img
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"BGAVATAR\" TEXT," + // 10: bgavatar
                "\"TCOUNT\" INTEGER NOT NULL ," + // 11: tcount
                "\"COUNT\" TEXT," + // 12: count
                "\"SCOUNT\" TEXT," + // 13: scount
                "\"TYPE\" TEXT," + // 14: type
                "\"SUBTITLE\" TEXT," + // 15: subtitle
                "\"SUBTITLE_NEW\" TEXT," + // 16: subtitle_new
                "\"TITLE_IMG_NEW\" TEXT," + // 17: title_img_new
                "\"TYPE_NEW\" TEXT," + // 18: type_new
                "\"THUMB_IMG\" TEXT," + // 19: thumb_img
                "\"PPP\" INTEGER NOT NULL ," + // 20: ppp
                "\"SPLAY_COUNT\" INTEGER NOT NULL ," + // 21: splay_count
                "\"PLAY_COUNT\" INTEGER NOT NULL ," + // 22: play_count
                "\"SMALL_NUM\" INTEGER NOT NULL ," + // 23: small_num
                "\"CONTENT\" TEXT," + // 24: content
                "\"START_TIME\" TEXT," + // 25: start_time
                "\"END_TIME\" TEXT," + // 26: end_time
                "\"BM_START_TIME\" TEXT," + // 27: bm_start_time
                "\"BM_END_TIME\" TEXT," + // 28: bm_end_time
                "\"NUM\" INTEGER NOT NULL ," + // 29: num
                "\"DAY_NUM\" INTEGER NOT NULL ," + // 30: day_num
                "\"CREATED_AT\" TEXT," + // 31: created_at
                "\"UPDATED_AT\" TEXT," + // 32: updated_at
                "\"KA_NUM\" INTEGER NOT NULL ," + // 33: ka_num
                "\"CAN_CREATED_AT\" TEXT," + // 34: can_created_at
                "\"BUY_COUNT\" INTEGER NOT NULL ," + // 35: buy_count
                "\"COURSE_NUM\" INTEGER NOT NULL ," + // 36: course_num
                "\"LISTEN_USERS_COUNT\" TEXT," + // 37: listen_users_count
                "\"IMG_NEW\" TEXT," + // 38: img_new
                "\"TEX\" TEXT," + // 39: tex
                "\"SEQUENCE\" INTEGER NOT NULL ," + // 40: sequence
                "\"BAOMING\" INTEGER NOT NULL ," + // 41: baoming
                "\"TYPE_COURSE\" TEXT," + // 42: type_course
                "\"BODY_IMG_NEW\" TEXT);"); // 43: body_img_new
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildEntity entity) {
        stmt.clearBindings();
 
        Long objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindLong(1, objectId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(4, uname);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String avatars = entity.getAvatars();
        if (avatars != null) {
            stmt.bindString(6, avatars);
        }
 
        String type_description = entity.getType_description();
        if (type_description != null) {
            stmt.bindString(7, type_description);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(9, img);
        }
        stmt.bindLong(10, entity.getStatus());
 
        String bgavatar = entity.getBgavatar();
        if (bgavatar != null) {
            stmt.bindString(11, bgavatar);
        }
        stmt.bindLong(12, entity.getTcount());
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(13, count);
        }
 
        String scount = entity.getScount();
        if (scount != null) {
            stmt.bindString(14, scount);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(15, type);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(16, subtitle);
        }
 
        String subtitle_new = entity.getSubtitle_new();
        if (subtitle_new != null) {
            stmt.bindString(17, subtitle_new);
        }
 
        String title_img_new = entity.getTitle_img_new();
        if (title_img_new != null) {
            stmt.bindString(18, title_img_new);
        }
 
        String type_new = entity.getType_new();
        if (type_new != null) {
            stmt.bindString(19, type_new);
        }
 
        String thumb_img = entity.getThumb_img();
        if (thumb_img != null) {
            stmt.bindString(20, thumb_img);
        }
        stmt.bindLong(21, entity.getPpp());
        stmt.bindLong(22, entity.getSplay_count());
        stmt.bindLong(23, entity.getPlay_count());
        stmt.bindLong(24, entity.getSmall_num());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(25, content);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(26, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(27, end_time);
        }
 
        String bm_start_time = entity.getBm_start_time();
        if (bm_start_time != null) {
            stmt.bindString(28, bm_start_time);
        }
 
        String bm_end_time = entity.getBm_end_time();
        if (bm_end_time != null) {
            stmt.bindString(29, bm_end_time);
        }
        stmt.bindLong(30, entity.getNum());
        stmt.bindLong(31, entity.getDay_num());
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(32, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(33, updated_at);
        }
        stmt.bindLong(34, entity.getKa_num());
 
        String can_created_at = entity.getCan_created_at();
        if (can_created_at != null) {
            stmt.bindString(35, can_created_at);
        }
        stmt.bindLong(36, entity.getBuy_count());
        stmt.bindLong(37, entity.getCourse_num());
 
        String listen_users_count = entity.getListen_users_count();
        if (listen_users_count != null) {
            stmt.bindString(38, listen_users_count);
        }
 
        String img_new = entity.getImg_new();
        if (img_new != null) {
            stmt.bindString(39, img_new);
        }
 
        String tex = entity.getTex();
        if (tex != null) {
            stmt.bindString(40, tex);
        }
        stmt.bindLong(41, entity.getSequence());
        stmt.bindLong(42, entity.getBaoming());
 
        String type_course = entity.getType_course();
        if (type_course != null) {
            stmt.bindString(43, type_course);
        }
 
        String body_img_new = entity.getBody_img_new();
        if (body_img_new != null) {
            stmt.bindString(44, body_img_new);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildEntity entity) {
        stmt.clearBindings();
 
        Long objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindLong(1, objectId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(4, uname);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String avatars = entity.getAvatars();
        if (avatars != null) {
            stmt.bindString(6, avatars);
        }
 
        String type_description = entity.getType_description();
        if (type_description != null) {
            stmt.bindString(7, type_description);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(9, img);
        }
        stmt.bindLong(10, entity.getStatus());
 
        String bgavatar = entity.getBgavatar();
        if (bgavatar != null) {
            stmt.bindString(11, bgavatar);
        }
        stmt.bindLong(12, entity.getTcount());
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(13, count);
        }
 
        String scount = entity.getScount();
        if (scount != null) {
            stmt.bindString(14, scount);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(15, type);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(16, subtitle);
        }
 
        String subtitle_new = entity.getSubtitle_new();
        if (subtitle_new != null) {
            stmt.bindString(17, subtitle_new);
        }
 
        String title_img_new = entity.getTitle_img_new();
        if (title_img_new != null) {
            stmt.bindString(18, title_img_new);
        }
 
        String type_new = entity.getType_new();
        if (type_new != null) {
            stmt.bindString(19, type_new);
        }
 
        String thumb_img = entity.getThumb_img();
        if (thumb_img != null) {
            stmt.bindString(20, thumb_img);
        }
        stmt.bindLong(21, entity.getPpp());
        stmt.bindLong(22, entity.getSplay_count());
        stmt.bindLong(23, entity.getPlay_count());
        stmt.bindLong(24, entity.getSmall_num());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(25, content);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(26, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(27, end_time);
        }
 
        String bm_start_time = entity.getBm_start_time();
        if (bm_start_time != null) {
            stmt.bindString(28, bm_start_time);
        }
 
        String bm_end_time = entity.getBm_end_time();
        if (bm_end_time != null) {
            stmt.bindString(29, bm_end_time);
        }
        stmt.bindLong(30, entity.getNum());
        stmt.bindLong(31, entity.getDay_num());
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(32, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(33, updated_at);
        }
        stmt.bindLong(34, entity.getKa_num());
 
        String can_created_at = entity.getCan_created_at();
        if (can_created_at != null) {
            stmt.bindString(35, can_created_at);
        }
        stmt.bindLong(36, entity.getBuy_count());
        stmt.bindLong(37, entity.getCourse_num());
 
        String listen_users_count = entity.getListen_users_count();
        if (listen_users_count != null) {
            stmt.bindString(38, listen_users_count);
        }
 
        String img_new = entity.getImg_new();
        if (img_new != null) {
            stmt.bindString(39, img_new);
        }
 
        String tex = entity.getTex();
        if (tex != null) {
            stmt.bindString(40, tex);
        }
        stmt.bindLong(41, entity.getSequence());
        stmt.bindLong(42, entity.getBaoming());
 
        String type_course = entity.getType_course();
        if (type_course != null) {
            stmt.bindString(43, type_course);
        }
 
        String body_img_new = entity.getBody_img_new();
        if (body_img_new != null) {
            stmt.bindString(44, body_img_new);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public ChildEntity readEntity(Cursor cursor, int offset) {
        ChildEntity entity = new ChildEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatars
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type_description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // img
            cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bgavatar
            cursor.getInt(offset + 11), // tcount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // count
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // scount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // type
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // subtitle
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // subtitle_new
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // title_img_new
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // type_new
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // thumb_img
            cursor.getInt(offset + 20), // ppp
            cursor.getInt(offset + 21), // splay_count
            cursor.getInt(offset + 22), // play_count
            cursor.getInt(offset + 23), // small_num
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // content
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // start_time
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // end_time
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // bm_start_time
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // bm_end_time
            cursor.getInt(offset + 29), // num
            cursor.getInt(offset + 30), // day_num
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // created_at
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // updated_at
            cursor.getInt(offset + 33), // ka_num
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // can_created_at
            cursor.getInt(offset + 35), // buy_count
            cursor.getInt(offset + 36), // course_num
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // listen_users_count
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // img_new
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // tex
            cursor.getInt(offset + 40), // sequence
            cursor.getInt(offset + 41), // baoming
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // type_course
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43) // body_img_new
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildEntity entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatars(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType_description(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setBgavatar(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTcount(cursor.getInt(offset + 11));
        entity.setCount(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setScount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSubtitle(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSubtitle_new(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTitle_img_new(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setType_new(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setThumb_img(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPpp(cursor.getInt(offset + 20));
        entity.setSplay_count(cursor.getInt(offset + 21));
        entity.setPlay_count(cursor.getInt(offset + 22));
        entity.setSmall_num(cursor.getInt(offset + 23));
        entity.setContent(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setStart_time(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setEnd_time(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setBm_start_time(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setBm_end_time(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setNum(cursor.getInt(offset + 29));
        entity.setDay_num(cursor.getInt(offset + 30));
        entity.setCreated_at(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setUpdated_at(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setKa_num(cursor.getInt(offset + 33));
        entity.setCan_created_at(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setBuy_count(cursor.getInt(offset + 35));
        entity.setCourse_num(cursor.getInt(offset + 36));
        entity.setListen_users_count(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setImg_new(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setTex(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setSequence(cursor.getInt(offset + 40));
        entity.setBaoming(cursor.getInt(offset + 41));
        entity.setType_course(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setBody_img_new(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChildEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChildEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChildEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "child" to-many relationship of ObjectEntity. */
    public List<ChildEntity> _queryObjectEntity_Child(Long objectId) {
        synchronized (this) {
            if (objectEntity_ChildQuery == null) {
                QueryBuilder<ChildEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ObjectId.eq(null));
                objectEntity_ChildQuery = queryBuilder.build();
            }
        }
        Query<ChildEntity> query = objectEntity_ChildQuery.forCurrentThread();
        query.setParameter(0, objectId);
        return query.list();
    }

}
