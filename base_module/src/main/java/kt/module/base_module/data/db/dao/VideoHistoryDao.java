package kt.module.base_module.data.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import kt.module.base_module.data.db.table.VideoHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_HISTORY".
*/
public class VideoHistoryDao extends AbstractDao<VideoHistory, Long> {

    public static final String TABLENAME = "VIDEO_HISTORY";

    /**
     * Properties of entity VideoHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImageSource = new Property(0, String.class, "imageSource", false, "IMAGE_SOURCE");
        public final static Property VideoId = new Property(1, Long.class, "videoId", true, "_id");
        public final static Property VideoName = new Property(2, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property CreateTime = new Property(3, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property ColumnType = new Property(4, String.class, "columnType", false, "COLUMN_TYPE");
        public final static Property VideoType = new Property(5, Integer.class, "videoType", false, "VIDEO_TYPE");
        public final static Property Score = new Property(6, String.class, "score", false, "SCORE");
        public final static Property ShareUrl = new Property(7, String.class, "shareUrl", false, "SHARE_URL");
        public final static Property PlayType = new Property(8, Integer.class, "playType", false, "PLAY_TYPE");
        public final static Property Image = new Property(9, String.class, "image", false, "IMAGE");
        public final static Property CpId = new Property(10, Integer.class, "cpId", false, "CP_ID");
        public final static Property Cnl_flag_fav = new Property(11, Integer.class, "cnl_flag_fav", false, "CNL_FLAG_FAV");
        public final static Property Fav_createtime = new Property(12, Long.class, "fav_createtime", false, "FAV_CREATETIME");
        public final static Property Director = new Property(13, String.class, "director", false, "DIRECTOR");
        public final static Property Cnl_play_time = new Property(14, Long.class, "cnl_play_time", false, "CNL_PLAY_TIME");
        public final static Property Actor = new Property(15, String.class, "actor", false, "ACTOR");
        public final static Property Duration = new Property(16, String.class, "duration", false, "DURATION");
        public final static Property ImageTv = new Property(17, String.class, "imageTv", false, "IMAGE_TV");
        public final static Property ShowId = new Property(18, Integer.class, "showId", false, "SHOW_ID");
        public final static Property ShowName = new Property(19, String.class, "showName", false, "SHOW_NAME");
        public final static Property VideoPermission = new Property(20, Integer.class, "videoPermission", false, "VIDEO_PERMISSION");
        public final static Property Video_category = new Property(21, Integer.class, "video_category", false, "VIDEO_CATEGORY");
        public final static Property IsReview = new Property(22, Integer.class, "isReview", false, "IS_REVIEW");
        public final static Property Url = new Property(23, String.class, "url", false, "URL");
        public final static Property VideoImageY = new Property(24, String.class, "videoImageY", false, "VIDEO_IMAGE_Y");
        public final static Property ContentPictrues = new Property(25, String.class, "contentPictrues", false, "CONTENT_PICTRUES");
        public final static Property Data = new Property(26, byte[].class, "data", false, "DATA");
    }


    public VideoHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public VideoHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_HISTORY\" (" + //
                "\"IMAGE_SOURCE\" TEXT," + // 0: imageSource
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: videoId
                "\"VIDEO_NAME\" TEXT," + // 2: videoName
                "\"CREATE_TIME\" INTEGER," + // 3: createTime
                "\"COLUMN_TYPE\" TEXT," + // 4: columnType
                "\"VIDEO_TYPE\" INTEGER," + // 5: videoType
                "\"SCORE\" TEXT," + // 6: score
                "\"SHARE_URL\" TEXT," + // 7: shareUrl
                "\"PLAY_TYPE\" INTEGER," + // 8: playType
                "\"IMAGE\" TEXT," + // 9: image
                "\"CP_ID\" INTEGER," + // 10: cpId
                "\"CNL_FLAG_FAV\" INTEGER," + // 11: cnl_flag_fav
                "\"FAV_CREATETIME\" INTEGER," + // 12: fav_createtime
                "\"DIRECTOR\" TEXT," + // 13: director
                "\"CNL_PLAY_TIME\" INTEGER," + // 14: cnl_play_time
                "\"ACTOR\" TEXT," + // 15: actor
                "\"DURATION\" TEXT," + // 16: duration
                "\"IMAGE_TV\" TEXT," + // 17: imageTv
                "\"SHOW_ID\" INTEGER," + // 18: showId
                "\"SHOW_NAME\" TEXT," + // 19: showName
                "\"VIDEO_PERMISSION\" INTEGER," + // 20: videoPermission
                "\"VIDEO_CATEGORY\" INTEGER," + // 21: video_category
                "\"IS_REVIEW\" INTEGER," + // 22: isReview
                "\"URL\" TEXT," + // 23: url
                "\"VIDEO_IMAGE_Y\" TEXT," + // 24: videoImageY
                "\"CONTENT_PICTRUES\" TEXT," + // 25: contentPictrues
                "\"DATA\" BLOB);"); // 26: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoHistory entity) {
        stmt.clearBindings();
 
        String imageSource = entity.getImageSource();
        if (imageSource != null) {
            stmt.bindString(1, imageSource);
        }
 
        Long videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindLong(2, videoId);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(3, videoName);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        String columnType = entity.getColumnType();
        if (columnType != null) {
            stmt.bindString(5, columnType);
        }
 
        Integer videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindLong(6, videoType);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(7, score);
        }
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(8, shareUrl);
        }
 
        Integer playType = entity.getPlayType();
        if (playType != null) {
            stmt.bindLong(9, playType);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        Integer cpId = entity.getCpId();
        if (cpId != null) {
            stmt.bindLong(11, cpId);
        }
 
        Integer cnl_flag_fav = entity.getCnl_flag_fav();
        if (cnl_flag_fav != null) {
            stmt.bindLong(12, cnl_flag_fav);
        }
 
        Long fav_createtime = entity.getFav_createtime();
        if (fav_createtime != null) {
            stmt.bindLong(13, fav_createtime);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(14, director);
        }
 
        Long cnl_play_time = entity.getCnl_play_time();
        if (cnl_play_time != null) {
            stmt.bindLong(15, cnl_play_time);
        }
 
        String actor = entity.getActor();
        if (actor != null) {
            stmt.bindString(16, actor);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(17, duration);
        }
 
        String imageTv = entity.getImageTv();
        if (imageTv != null) {
            stmt.bindString(18, imageTv);
        }
 
        Integer showId = entity.getShowId();
        if (showId != null) {
            stmt.bindLong(19, showId);
        }
 
        String showName = entity.getShowName();
        if (showName != null) {
            stmt.bindString(20, showName);
        }
 
        Integer videoPermission = entity.getVideoPermission();
        if (videoPermission != null) {
            stmt.bindLong(21, videoPermission);
        }
 
        Integer video_category = entity.getVideo_category();
        if (video_category != null) {
            stmt.bindLong(22, video_category);
        }
 
        Integer isReview = entity.getIsReview();
        if (isReview != null) {
            stmt.bindLong(23, isReview);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(24, url);
        }
 
        String videoImageY = entity.getVideoImageY();
        if (videoImageY != null) {
            stmt.bindString(25, videoImageY);
        }
 
        String contentPictrues = entity.getContentPictrues();
        if (contentPictrues != null) {
            stmt.bindString(26, contentPictrues);
        }
 
        byte[] data = entity.getData();
        if (data != null) {
            stmt.bindBlob(27, data);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoHistory entity) {
        stmt.clearBindings();
 
        String imageSource = entity.getImageSource();
        if (imageSource != null) {
            stmt.bindString(1, imageSource);
        }
 
        Long videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindLong(2, videoId);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(3, videoName);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        String columnType = entity.getColumnType();
        if (columnType != null) {
            stmt.bindString(5, columnType);
        }
 
        Integer videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindLong(6, videoType);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(7, score);
        }
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(8, shareUrl);
        }
 
        Integer playType = entity.getPlayType();
        if (playType != null) {
            stmt.bindLong(9, playType);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        Integer cpId = entity.getCpId();
        if (cpId != null) {
            stmt.bindLong(11, cpId);
        }
 
        Integer cnl_flag_fav = entity.getCnl_flag_fav();
        if (cnl_flag_fav != null) {
            stmt.bindLong(12, cnl_flag_fav);
        }
 
        Long fav_createtime = entity.getFav_createtime();
        if (fav_createtime != null) {
            stmt.bindLong(13, fav_createtime);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(14, director);
        }
 
        Long cnl_play_time = entity.getCnl_play_time();
        if (cnl_play_time != null) {
            stmt.bindLong(15, cnl_play_time);
        }
 
        String actor = entity.getActor();
        if (actor != null) {
            stmt.bindString(16, actor);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(17, duration);
        }
 
        String imageTv = entity.getImageTv();
        if (imageTv != null) {
            stmt.bindString(18, imageTv);
        }
 
        Integer showId = entity.getShowId();
        if (showId != null) {
            stmt.bindLong(19, showId);
        }
 
        String showName = entity.getShowName();
        if (showName != null) {
            stmt.bindString(20, showName);
        }
 
        Integer videoPermission = entity.getVideoPermission();
        if (videoPermission != null) {
            stmt.bindLong(21, videoPermission);
        }
 
        Integer video_category = entity.getVideo_category();
        if (video_category != null) {
            stmt.bindLong(22, video_category);
        }
 
        Integer isReview = entity.getIsReview();
        if (isReview != null) {
            stmt.bindLong(23, isReview);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(24, url);
        }
 
        String videoImageY = entity.getVideoImageY();
        if (videoImageY != null) {
            stmt.bindString(25, videoImageY);
        }
 
        String contentPictrues = entity.getContentPictrues();
        if (contentPictrues != null) {
            stmt.bindString(26, contentPictrues);
        }
 
        byte[] data = entity.getData();
        if (data != null) {
            stmt.bindBlob(27, data);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public VideoHistory readEntity(Cursor cursor, int offset) {
        VideoHistory entity = new VideoHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imageSource
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // videoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // columnType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // videoType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // score
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shareUrl
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // playType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // image
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // cpId
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // cnl_flag_fav
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // fav_createtime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // director
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // cnl_play_time
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // actor
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // duration
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // imageTv
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // showId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // showName
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // videoPermission
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // video_category
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // isReview
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // url
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // videoImageY
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // contentPictrues
            cursor.isNull(offset + 26) ? null : cursor.getBlob(offset + 26) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoHistory entity, int offset) {
        entity.setImageSource(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVideoId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setVideoName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setColumnType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setScore(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShareUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlayType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCpId(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCnl_flag_fav(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setFav_createtime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setDirector(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCnl_play_time(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setActor(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDuration(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setImageTv(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setShowId(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setShowName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setVideoPermission(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setVideo_category(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setIsReview(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setUrl(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setVideoImageY(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setContentPictrues(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setData(cursor.isNull(offset + 26) ? null : cursor.getBlob(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoHistory entity, long rowId) {
        entity.setVideoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoHistory entity) {
        if(entity != null) {
            return entity.getVideoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoHistory entity) {
        return entity.getVideoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
